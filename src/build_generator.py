import json
import os
from gemini_api import generate_build_with_gemini
from datetime import datetime
import mcschematic
from genetic_algorithm import GeneticAlgorithm

def generate_build(size, description, build_type="default_type"):
    # Generate layers using the Gemini API.
    build = generate_build_with_gemini(size, build_type, description)

    if not build:
        raise ValueError("No layers generated by the Gemini API.")

    # # Search for valid entrances within the first two layers. Since at max an entrance will be a 1x2, only need 2 layers.
    # # Basically rounding up all the air blocks in each of the first two layers, and if any stack on top of each other,
    # # then that is a valid entrance.
    # lc = 0
    # entrance_layers = []
    # for layer in build:
    #     if lc >= 2:
    #         break
    #     entrance_layers.append(layer)
    #     lc += 1
    # # Grab all 4 walls and search for an entrance
    # air_coordinates = {"north": {}, "south": {}, "east": {}, "west": {}}
    # for layer in entrance_layers:
    #     north_wall = [row[0] for row in layer]
    #     south_wall = [row[-1] for row in layer]
    #     east_wall = layer[0]
    #     west_wall = layer[-1]

    #     for i in range(len(north_wall)):
    #         if north_wall[i] == "AA":
    #             if i not in air_coordinates["north"]:
    #                 air_coordinates["north"][i] = 1
    #             else:
    #                 air_coordinates["north"][i] += 1
    #     for i in range(len(south_wall)):
    #         if south_wall[i] == "AA":
    #             if i not in air_coordinates["south"]:
    #                 air_coordinates["south"][i] = 1
    #             else:
    #                 air_coordinates["south"][i] += 1

    #     for i in range(len(east_wall)):
    #         if east_wall[i] == "AA":
    #             if i not in air_coordinates["east"]:
    #                 air_coordinates["east"][i] = 1
    #             else:
    #                 air_coordinates["east"][i] += 1

    #     for i in range(len(west_wall)):
    #         if west_wall[i] == "AA":
    #             if i not in air_coordinates["west"]:
    #                 air_coordinates["west"][i] = 1
    #             else:
    #                 air_coordinates["west"][i] += 1

    # valid_entrances = 0
    # for direction in air_coordinates:
    #     for coordinate in air_coordinates[direction]:
    #         if air_coordinates[direction][coordinate] > 1:
    #             valid_entrances += 1

    # if valid_entrances < 1:
    #     raise ValueError("No Valid Entrances in Build")

    # Run the genetic algorithm to improve the build
    print("Starting GA evolution...")
    print(f"Build: {build}")  # Debug print
    print(f"Build type: {build_type}")  # Debug print
    try:
        ga = GeneticAlgorithm(build, build_type)
        improved_build = ga.evolve(generations=10)
    except Exception as e:
        print(f"Error during GA execution: {e}")
        raise
    print("GA evolution completed.")
    
    # Load block abbreviations.
    data_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'block_abbreviations.json')
    with open(data_path, 'r') as f:
        block_abbreviations = json.load(f)
    
    # Create a unique folder for this build.
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_description = "".join(c for c in description if c.isalnum() or c in ['-', '_']).lower()
    build_folder = os.path.join(os.path.dirname(__file__), '..', 'output', f"{safe_description}_{size}x{size}_{timestamp}")
    os.makedirs(build_folder, exist_ok=True)
    
    # Save each layer as a text file in the build folder.
    for i, layer in enumerate(improved_build):
        with open(os.path.join(build_folder, f'layer_{i}.txt'), 'w') as f:
            for row in layer:
                f.write(' '.join(row) + '\n')
        yield int((i + 1) / len(improved_build) * 100)  # Yield progress

    # Create a schematic file using mcschematic
    schem = mcschematic.MCSchematic()

    # Convert the layers into blocks in the schematic
    for z, layer in enumerate(improved_build):
        for y, row in enumerate(layer):
            for x, block_abbr in enumerate(row):
                block_name = block_abbreviations.get(block_abbr, "minecraft:air")  # Default to air if abbreviation is not found
                schem.setBlock((x, z, y), block_name)  # (x, z, y) for Minecraft coordinates

    # Save the schematic file
    schem.save(build_folder, f"{build_type}_{size}x{size}_{timestamp}", mcschematic.Version.JE_1_18_2)

    print(f"Build generated with {size}x{size} size and type {build_type}. Files saved in {build_folder}.")