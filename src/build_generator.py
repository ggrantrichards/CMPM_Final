import json
import os
from gemini_api import generate_build_with_gemini
from datetime import datetime
import mcschematic
from genetic_algorithm import GeneticAlgorithm

def generate_build(size, description, build_type="default_type"):
    # Generate layers using the Gemini API.
    build = generate_build_with_gemini(size, build_type, description)

    if not build:
        raise ValueError("No layers generated by the Gemini API.")

    # Run the genetic algorithm to improve the build
    print("Starting GA evolution...")
    try:
        ga = GeneticAlgorithm(build, build_type, population_size=100, mutation_rate=0.05)
        improved_build = ga.evolve(generations=20)
    except Exception as e:
        print(f"Error during GA execution: {e}")
        raise
    print("GA evolution completed.")
    
    # Add doors to the walls after evolution
    print("Adding doors to the walls...")
    try:
        # Determine the center position(s) for the doors
        if size % 2 == 1:  # Odd size
            center = size // 2
            door_width = 1
        else:  # Even size
            center = size // 2 - 1
            door_width = 2

        # Iterate over the second and third layers
        for layer_idx in [1, 2]:  # Second and third layers
            layer = improved_build[layer_idx]
            
            # North wall (first column)
            for i in range(center, center + door_width):
                layer[i][0] = "AA"  # Replace with air block
            
            # South wall (last column)
            for i in range(center, center + door_width):
                layer[i][-1] = "AA"  # Replace with air block
            
            # East wall (first row)
            for i in range(center, center + door_width):
                layer[0][i] = "AA"  # Replace with air block
            
            # West wall (last row)
            for i in range(center, center + door_width):
                layer[-1][i] = "AA"  # Replace with air block

    except Exception as e:
        print(f"Error adding doors: {e}")
        raise
    
    # Load block abbreviations.
    data_path = os.path.join(os.path.dirname(__file__), '..', 'data', 'block_abbreviations.json')
    with open(data_path, 'r') as f:
        block_abbreviations = json.load(f)
    
    # Create a unique folder for this build.
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    safe_description = "".join(c for c in description if c.isalnum() or c in ['-', '_']).lower()
    build_folder = os.path.join(os.path.dirname(__file__), '..', 'output', f"{safe_description}_{size}x{size}_{timestamp}")
    os.makedirs(build_folder, exist_ok=True)
    
    # Save each layer as a text file in the build folder.
    for i, layer in enumerate(improved_build):
        with open(os.path.join(build_folder, f'layer_{i}.txt'), 'w') as f:
            for row in layer:
                f.write(' '.join(row) + '\n')
        yield int((i + 1) / len(improved_build) * 100)  # Yield progress

    # Create a schematic file using mcschematic
    schem = mcschematic.MCSchematic()

    # Convert the layers into blocks in the schematic
    for z, layer in enumerate(improved_build):
        for y, row in enumerate(layer):
            for x, block_abbr in enumerate(row):
                block_name = block_abbreviations.get(block_abbr, "minecraft:air")  # Default to air if abbreviation is not found
                schem.setBlock((x, z, y), block_name)  # (x, z, y) for Minecraft coordinates

    # Save the schematic file
    schem.save(build_folder, f"{build_type}_{size}x{size}_{timestamp}", mcschematic.Version.JE_1_18_2)

    print(f"Build generated with {size}x{size} size and type {build_type}. Files saved in {build_folder}.")